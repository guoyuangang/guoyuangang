[1mdiff --git a/basic.vim b/basic.vim[m
[1mindex 0339f7a..3a18fd6 100644[m
[1m--- a/basic.vim[m
[1m+++ b/basic.vim[m
[36m@@ -1,38 +1,6 @@[m
[31m-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-" Maintainer:[m
[31m-"       Amir Salihefendic - @amix3k[m
[31m-"[m
[31m-" Awesome_version:[m
[31m-"       Get this config, nice color schemes and lots of plugins![m
[31m-"[m
[31m-"       Install the awesome version from:[m
[31m-"[m
[31m-"           https://github.com/amix/vimrc[m
[31m-"[m
[31m-" Sections:[m
[31m-"    -> General[m
[31m-"    -> VIM user interface[m
[31m-"    -> Colors and Fonts[m
[31m-"    -> Files and backups[m
[31m-"    -> Text, tab and indent related[m
[31m-"    -> Visual mode related[m
[31m-"    -> Moving around, tabs and buffers[m
[31m-"    -> Status line[m
[31m-"    -> Editing mappings[m
[31m-"    -> vimgrep searching and cope displaying[m
[31m-"    -> Spell checking[m
[31m-"    -> Misc[m
[31m-"    -> Helper functions[m
[31m-"[m
[31m-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-[m
[31m-[m
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
 " => General[m
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-" Sets how many lines of history VIM has to remember[m
[31m-set history=500[m
[31m-[m
 " Enable filetype plugins[m
 filetype plugin on[m
 filetype indent on[m
[36m@@ -52,18 +20,11 @@[m [mnmap <leader>w :w!<cr>[m
 " (useful for handling the permission-denied error)[m
 command! W execute 'w !sudo tee % > /dev/null' <bar> edit![m
 [m
[31m-[m
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
 " => VIM user interface[m
 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-" Set 7 lines to the cursor - when moving vertically using j/k[m
[31m-set so=7[m
[31m-[m
[31m-" Avoid garbled characters in Chinese language windows OS[m
[31m-let $LANG='en'[m
[31m-set langmenu=en[m
[31m-source $VIMRUNTIME/delmenu.vim[m
[31m-source $VIMRUNTIME/menu.vim[m
[32m+[m[32m" Set 5 lines to the cursor - when moving vertically using j/k[m
[32m+[m[32mset so=5[m
 [m
 " Turn on the Wild menu[m
 set wildmenu[m
[36m@@ -116,16 +77,9 @@[m [mset mat=2[m
 " No annoying sound on errors[m
 set noerrorbells[m
 set novisualbell[m
[31m-set t_vb=[m
[31m-set tm=500[m
[31m-[m
[31m-" Properly disable sound on errors on MacVim[m
[31m-if has("gui_macvim")[m
[31m-    autocmd GUIEnter * set vb t_vb=[m
[31m-endif[m
[32m+[m[32mset t_vb=    " ÂêØÁî®ÂèØËßÜÂìçÈìÉÂäüËÉΩ[m
 [m
 " Add a bit extra margin to the left[m
[31m-" set foldcolumn=1[m
 set number[m
 [m
 [m
[36m@@ -143,21 +97,6 @@[m [mif $COLORTERM == 'gnome-terminal'[m
     set t_Co=256[m
 endif[m
 [m
[31m-" try[m
[31m-"     colorscheme desert[m
[31m-" catch[m
[31m-" endtry[m
[31m-[m
[31m-" set background=dark[m
[31m-[m
[31m-" Set extra options when running in GUI mode[m
[31m-if has("gui_running")[m
[31m-    set guioptions-=T[m
[31m-    set guioptions-=e[m
[31m-    set t_Co=256[m
[31m-    set guitablabel=%M\ %t[m
[31m-endif[m
[31m-[m
 " Set utf8 as standard encoding and en_US as the standard language[m
 set encoding=utf8[m
 [m
[36m@@ -187,13 +126,9 @@[m [mset smarttab[m
 set shiftwidth=4[m
 set tabstop=4[m
 [m
[31m-" Linebreak on 500 characters[m
[31m-set lbr[m
[31m-set tw=500[m
[31m-[m
 set ai "Auto indent[m
 set si "Smart indent[m
[31m-set wrap "Wrap lines[m
[32m+[m[32mset nowrap "Wrap lines[m
 [m
 [m
 """"""""""""""""""""""""""""""[m
[36m@@ -203,59 +138,49 @@[m [mset wrap "Wrap lines[m
 " Super useful! From an idea by Michael Naumann[m
 vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>[m
 vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>[m
[32m+[m[32mfunction! VisualSelection(direction, extra_filter) range[m
[32m+[m[32m    let l:saved_reg = @"[m
[32m+[m[32m    execute "normal! vgvy"[m
 [m
[32m+[m[32m    let l:pattern = escape(@", "\\/.*'$^~[]")[m
[32m+[m[32m    let l:pattern = substitute(l:pattern, "\n$", "", "")[m
 [m
[31m-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-" => Moving around, tabs, windows and buffers[m
[31m-"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[31m-" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)[m
[31m-map <space> /[m
[31m-map <C-space> ?[m
[32m+[m[32m    if a:direction == 'gv'[m
[32m+[m[32m        call CmdLine("Ack '" . l:pattern . "' " )[m
[32m+[m[32m    elseif a:direction == 'replace'[m
[32m+[m[32m        call CmdLine("%s" . '/'. l:pattern . '/')[m
[32m+[m[32m    endif[m
 [m
[31m-" Disable highlight when <leader><cr> is pressed[m
[31m-map <silent> <leader><cr> :noh<cr>[m
[32m+[m[32m    let @/ = l:pattern[m
[32m+[m[32m    let @" = l:saved_reg[m
[32m+[m[32mendfunction[m
 [m
[31m-" Smart way to move between windows[m
[31m-map <C-j> <C-W>j[m
[31m-map <C-k> <C-W>k[m
[31m-map <C-h> <C-W>h[m
[31m-map <C-l> <C-W>l[m
[32m+[m[32m" Cancel highlight when <leader><cr> is pressed[m
[32m+[m[32mmap <leader><nl> :noh<cr>[m
 [m
[31m-" Close the current buffer[m
[31m-map <leader>bd :Bclose<cr>:tabclose<cr>gT[m
[32m+[m[32m"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
[32m+[m[32m" => Moving around, tabs, windows and buffers[m
[32m+[m[32m"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""[m
 [m
[31m-" Close all the buffers[m
[31m-map <leader>ba :bufdo bd<cr>[m
 [m
[31m-map <leader>l :bnext<cr>[m
[31m-map <leader>h :bprevious<cr>[m
 [m
 " Useful mappings for managing tabs[m
[31m-map <leader>tn :tabnew<cr>[m
[31m-map <leader>to :tabonly<cr>[m
[31m-map <leader>tc :tabclose<cr>[m
 map <leader>tm :tabmove[m
[31m-map <leader>t<leader> :tabnext<cr>[m
[31m-[m
[31m-" Let 'tl' toggle between this and the last accessed tab[m
[31m-let g:lasttab = 1[m
[31m-nmap <leader>tl :exe "tabn ".g:lasttab<CR>[m
[31m-au TabLeave * let g:lasttab = tabpagenr()[m
[32m+[m[32mmap <leader>tk :tabonly<cr>[m
[32m+[m[32mmap <leader>tj :tabclose<cr>[m
[32m+[m[32mmap <leader>th :tabprevious<cr>[m
[32m+[m[32mmap <leader>tl :tabnext<cr>[m
 [m
[31m-[m
[31m-" Opens a new tab with the current buffer's path[m
[32m+[m[32m" Opens a new tab w wlhith the current buffer's path[m
 " Super useful when editing files in the same directory[m
[31m-map <leader>te :tabedit <C-r>=escape(expand("%:p:h"), " ")<cr>/[m
[32m+[m[32mmap <leader>tn :tabedit <C-r>=escape(expand("%:p:h"), " ")<cr>/[m
 [m
 " Switch CWD to the directory of the open buffer[m
 map <leader>cd :cd %:p:h<cr>:pwd<cr>[m
 [m
 " Specify the behavior when switching between buffers[m
[31m-try[m
[31m-  set switchbuf=useopen,usetab,newtab[m
[31m-  set stal=2[m
[31m-catch[m
[31m-endtry[m
[32m+[m[32mset switchbuf=newtab[m
[32m+[m[32mset stal=2[m
 [m
 " Return to last edit position when opening files (You want this!)[m
 au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif[m
[36m@@ -264,10 +189,7 @@[m [mau BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g[m
 """"""""""""""""""""""""""""""[m
 " => Status line[m
 """"""""""""""""""""""""""""""[m
[31m-" Always show the status line[m
 set laststatus=2[m
[31m-[m
[31m-" Format the status line[m
 set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c[m
 [m
 [m
[36m@@ -277,19 +199,6 @@[m [mset statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\[m
 " Remap VIM 0 to first non-blank character[m
 map 0 ^[m
 [m
[31m-" Move a line of text using ALT+[jk] or Command+[jk] on mac[m
[31m-nmap <M-j> mz:m+<cr>`z[m
[31m-nmap <M-k> mz:m-2<cr>`z[m
[31m-vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z[m
[31m-vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z[m
[31m-[m
[31m-if has("mac") || has("macunix")[m
[31m-  nmap <D-j> <M-j>[m
[31m-  nmap <D-k> <M-k>[m
[31m-  vmap <D-j> <M-j>[m
[31m-  vmap <D-k> <M-k>[m
[31m-endif[m
[31m-[m
 " Delete trailing white space on save, useful for some filetypes ;)[m
 fun! CleanExtraSpaces()[m
     let save_cursor = getpos(".")[m
[36m@@ -368,20 +277,3 @@[m [mendfunction[m
 function! CmdLine(str)[m
     call feedkeys(":" . a:str)[m
 endfunction[m
[31m-[m
[31m-function! VisualSelection(direction, extra_filter) range[m
[31m-    let l:saved_reg = @"[m
[31m-    execute "normal! vgvy"[m
[31m-[m
[31m-    let l:pattern = escape(@", "\\/.*'$^~[]")[m
[31m-    let l:pattern = substitute(l:pattern, "\n$", "", "")[m
[31m-[m
[31m-    if a:direction == 'gv'[m
[31m-        call CmdLine("Ack '" . l:pattern . "' " )[m
[31m-    elseif a:direction == 'replace'[m
[31m-        call CmdLine("%s" . '/'. l:pattern . '/')[m
[31m-    endif[m
[31m-[m
[31m-    let @/ = l:pattern[m
[31m-    let @" = l:saved_reg[m
[31m-endfunction[m
